#!/usr/bin/env python

import fire
from itertools import chain
import os
from pathlib import Path
import shutil
from subprocess import check_call


class Commands:
    @staticmethod
    def init(channel_dir: str):
        """Initialise a new channel directory"""
        # Create an empty channel
        channel_dir = Path(channel_dir)
        channel_dir.mkdir(exist_ok=True)
        (channel_dir / "noarch").mkdir(exist_ok=True)
        (channel_dir / "linux-64").mkdir(exist_ok=True)
        check_call(["conda", "index", channel_dir])

        # Create base packages
        neuro_forge = Path(__file__).parent
        for recipe_dir in chain(
            [neuro_forge / "soma-forge"], (neuro_forge / "recipes").iterdir()
        ):
            if not (recipe_dir / "recipe.yaml").exists():
                continue
            env = os.environ.copy()
            env["HOME"] = str(channel_dir)
            command = [
                "rattler-build",
                "build",
                "-r",
                str(recipe_dir),
                "--output-dir",
                str(channel_dir),
            ]
            variants = recipe_dir / "variants.yaml"
            if variants.exists():
                command.extend(["-m", str(variants)])
            check_call(command, env=env)

        # Cleanup and create channel index
        for i in ("bld", "src_cache", ".rattler", ".cache"):
            to_delete = channel_dir / i
            if to_delete.exists():
                shutil.rmtree(to_delete)
        check_call(["conda", "index", channel_dir])


if __name__ == "__main__":
    fire.Fire(Commands)
